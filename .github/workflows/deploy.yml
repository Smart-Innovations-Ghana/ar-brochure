name: Deploy AR Brochure to GitHub Pages

on:
  # Triggers the workflow on push to main branch
  push:
    branches: [ main, master ]
  
  # Triggers the workflow on pull request events targeting main
  pull_request:
    branches: [ main, master ]
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper git operations

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies (if package.json exists)
        run: |
          if [ -f package.json ]; then
            npm ci
          else
            echo "No package.json found, skipping npm install"
          fi

      - name: Validate HTML files
        run: |
          echo "Checking HTML file syntax..."
          if command -v htmlhint &> /dev/null; then
            htmlhint index.html
          else
            echo "HTMLHint not available, skipping HTML validation"
          fi

      - name: Check for required files
        run: |
          echo "Checking project structure..."
          
          # Check if index.html exists
          if [ ! -f index.html ]; then
            echo "‚ùå Error: index.html not found!"
            exit 1
          else
            echo "‚úÖ index.html found"
          fi
          
          # Check if targets.mind exists (warn but don't fail)
          if [ ! -f targets.mind ]; then
            echo "‚ö†Ô∏è  Warning: targets.mind not found - make sure to upload your compiled markers"
          else
            echo "‚úÖ targets.mind found"
          fi
          
          # Check assets directory structure
          if [ -d assets ]; then
            echo "‚úÖ Assets directory found"
            if [ -d assets/videos ]; then
              echo "‚úÖ Videos directory found"
              video_count=$(find assets/videos -name "*.mp4" | wc -l)
              echo "üìπ Found $video_count MP4 files"
            else
              echo "‚ö†Ô∏è  Videos directory not found"
            fi
            
            if [ -d assets/models ]; then
              echo "‚úÖ Models directory found"
              model_count=$(find assets/models -name "*.gltf" | wc -l)
              echo "üé® Found $model_count GLTF files"
            else
              echo "‚ö†Ô∏è  Models directory not found"
            fi
          else
            echo "‚ö†Ô∏è  Assets directory not found"
          fi

      - name: Optimize assets (if needed)
        run: |
          echo "Checking asset optimization..."
          
          # Check video file sizes
          if [ -d assets/videos ]; then
            echo "Video file sizes:"
            find assets/videos -name "*.mp4" -exec ls -lh {} \; | awk '{print $9 ": " $5}'
            
            # Warn about large video files
            find assets/videos -name "*.mp4" -size +50M -exec echo "‚ö†Ô∏è  Large video file detected: {} (consider compression)" \;
          fi
          
          # Check model file sizes
          if [ -d assets/models ]; then
            echo "Model file sizes:"
            find assets/models -name "*.gltf" -exec ls -lh {} \; | awk '{print $9 ": " $5}'
          fi

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Build site (if build script exists)
        run: |
          if [ -f package.json ] && npm run build --if-present; then
            echo "‚úÖ Build completed successfully"
          else
            echo "‚ÑπÔ∏è  No build script found or build not needed"
          fi

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Post-deployment verification
        run: |
          echo "üöÄ Deployment completed!"
          echo "üîó Site URL: ${{ steps.deployment.outputs.page_url }}"
          echo ""
          echo "üìã Post-deployment checklist:"
          echo "1. Test camera permissions on mobile devices"
          echo "2. Verify targets.mind file loads correctly"
          echo "3. Check that all assets (videos/models) are accessible"
          echo "4. Test AR tracking with your brochure pages"
          echo ""
          echo "‚ö†Ô∏è  Common issues to check:"
          echo "- HTTPS is required for camera access"
          echo "- Large files may cause loading delays"
          echo "- CORS issues with external assets"

  # Optional: Lighthouse performance audit
  # lighthouse:
  #   runs-on: ubuntu-latest
  #   needs: deploy
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Run Lighthouse CI
  #       uses: treosh/lighthouse-ci-action@v10
  #       with:
  #         urls: |
  #           ${{ needs.deploy.outputs.page_url || 'https://your-username.github.io/your-repo-name' }}
  #         configPath: './.lighthouserc.json'
  #         uploadArtifacts: true
  #         temporaryPublicStorage: true

  # Optional: Notify on deployment status
  notify:
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: always()
    
    steps:
      - name: Deployment Status Notification
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "‚úÖ AR Brochure deployed successfully!"
            echo "Site is now live and ready for testing."
          else
            echo "‚ùå Deployment failed!"
            echo "Check the workflow logs for details."
          fi